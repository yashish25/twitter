[{"/home/ashish/workspace/twitter/frontend/src/serviceWorker.js":"1","/home/ashish/workspace/twitter/frontend/src/pages/Login.jsx":"2","/home/ashish/workspace/twitter/frontend/src/index.js":"3","/home/ashish/workspace/twitter/frontend/src/conf/routes.js":"4","/home/ashish/workspace/twitter/frontend/src/pages/Register.jsx":"5","/home/ashish/workspace/twitter/frontend/src/App.js":"6","/home/ashish/workspace/twitter/frontend/src/pages/Tweet.jsx":"7"},{"size":5086,"mtime":1606333071670,"results":"8","hashOfConfig":"9"},{"size":5284,"mtime":1606333071670,"results":"10","hashOfConfig":"9"},{"size":549,"mtime":1606333071670,"results":"11","hashOfConfig":"9"},{"size":381,"mtime":1606507857169,"results":"12","hashOfConfig":"9"},{"size":6526,"mtime":1606731904987,"results":"13","hashOfConfig":"9"},{"size":2015,"mtime":1606565291540,"results":"14","hashOfConfig":"9"},{"size":3545,"mtime":1606333071670,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"2lp0r4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/home/ashish/workspace/twitter/frontend/src/serviceWorker.js",[],["35","36"],"/home/ashish/workspace/twitter/frontend/src/pages/Login.jsx",[],"/home/ashish/workspace/twitter/frontend/src/index.js",[],["37","38"],"/home/ashish/workspace/twitter/frontend/src/conf/routes.js",[],"/home/ashish/workspace/twitter/frontend/src/pages/Register.jsx",["39"],"/home/ashish/workspace/twitter/frontend/src/App.js",["40","41"],"import React, { Fragment } from 'react';\nimport { Nav } from 'react-bootstrap';\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport { useCookies } from 'react-cookie';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/App.css';\nimport routes from './conf/routes';\n\nfunction App() {\n    const [cookies, setCookie, removeCookie] = useCookies(['userId']);\n\n    // We need this to reset the max age of our userId\n    if (cookies && cookies.userId) {\n        setCookie('userId', cookies.userId, {\n            path: '/',\n            maxAge: process.env.REACT_APP_ENV_COOKIES_MAX_AGE\n        });\n    }\n\n    // Checks if the user is logged in\n    function isLoggedIn() {\n        return cookies.userId == 'undefined' || !cookies.userId ? false : true;\n    }\n\n    return (\n        <BrowserRouter>\n            <Nav defaultActiveKey=\"/\">\n                {isLoggedIn() ?\n                    <Fragment>\n                        <Nav.Item as=\"li\">\n                            <Nav.Link href=\"/tweet\">Tweet</Nav.Link>               \n                        </Nav.Item>\n\n                        <Nav.Item as=\"li\">\n                            <Nav.Link onClick={() => {\n                                removeCookie('userId');\n                            }}>Logout</Nav.Link>               \n                        </Nav.Item>  \n                    </Fragment>\n                : \n                    <Nav.Item as=\"li\">\n                        <Nav.Link href=\"/register\">Register Now!</Nav.Link>\n                        <Nav.Link href=\"/login\">Login</Nav.Link> \n                        \n                                      \n                    </Nav.Item>\n                    \n                }               \n            </Nav> \n            <Fragment>\n                {routes.map( ({ path, component, name}) => {\n                    return <Route exact path={path} key={name} component={component} />\n                })}\n            </Fragment>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n",["42","43"],"/home/ashish/workspace/twitter/frontend/src/pages/Tweet.jsx",["44","45","46"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { Button, Container, Row, Col, Form, Card } from 'react-bootstrap';\nimport { Helmet } from 'react-helmet';\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from \"react-router-dom\";\n\nconst axios = require('axios');\nconst moment = require('moment');\n\nexport default function Tweet() {\n    const [cookies, setCookie, removeCookie] = useCookies(['userId']);\n    const [tweet, setTweet] = useState(\"\");\n    const [tweetList, setTweetList] = useState([{}]);\n        \n    const getList = () => {\n        axios.get('http://localhost:3005/tweets/user/' + cookies.userId)\n        .then((res) => {\n            if (res) {\n                setTweetList(res.data);\n            }\n        });       \n    }\n       \n    useEffect(() => {\n        getList();\n    }, []);\n\n    // Redirect if not logged in\n    if (!cookies.userId) {       \n        return <Redirect to=\"/login\" />\n    }\n\n    // When the value changes for the text area\n    const handleChange = (event) => {\n        setTweet(event && event.target.value ? event.target.value:\"\");\n    };\n\n    // Save tweet\n    const save = async () => {\n        if (tweet) { \n            axios.post('http://localhost:3005/tweets', {\n                user_id: cookies.userId,\n                content: tweet\n            })\n            .then(async (res) => {\n                await getList();\n                setTweet(null);\n            });\n        }       \n    }\n\n    // Remove tweet\n    const remove = async (id) => {\n        console.log(id)\n        axios.delete('http://localhost:3005/tweets/' + id)\n        .then(async (res) => {\n            await getList();\n        });\n    }    \n    \n    return (       \n        <Fragment>           \n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>Tweet</title>\n            </Helmet>       \n            <Container>\n                <Row>            \n                    <Col>\n                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                            <Form.Label>Tweet</Form.Label>\n                            <Form.Control as=\"textarea\" rows=\"3\" value={tweet || \"\"} onChange={handleChange} />\n                        </Form.Group>\n                        <Button variant=\"primary\" type=\"button\" onClick={save}>\n                            Post tweet!\n                        </Button> \n                        <br/><br/>                    \n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h2>Tweets</h2>                        \n                            {tweetList.length && tweetList.map((item, index) => {\n                                return (\n                                    <Card key={index} style={{ width: '18rem' }}>\n                                        <Card.Body>  \n                                            <Card.Subtitle className=\"mb-2 text-muted\">{moment(item.date_time).format('LLL')}</Card.Subtitle>                                 \n                                            <Card.Text>{item.content}</Card.Text>\n                                            <Button variant=\"danger\" size=\"sm\" data-id={item.id} onClick={() => remove(item.id)} >Delete</Button>\n                                        </Card.Body>\n                                    </Card>\n                                )\n                            })} \n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    );\n}\n\n",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"47","replacedBy":"51"},{"ruleId":"49","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":130,"column":31,"nodeType":"55","messageId":"56","endLine":130,"endColumn":33},{"ruleId":"57","severity":1,"message":"58","line":3,"column":32,"nodeType":"59","messageId":"60","endLine":3,"endColumn":40},{"ruleId":"53","severity":1,"message":"61","line":22,"column":31,"nodeType":"55","messageId":"56","endLine":22,"endColumn":33},{"ruleId":"47","replacedBy":"62"},{"ruleId":"49","replacedBy":"63"},{"ruleId":"57","severity":1,"message":"64","line":11,"column":21,"nodeType":"59","messageId":"60","endLine":11,"endColumn":30},{"ruleId":"57","severity":1,"message":"65","line":11,"column":32,"nodeType":"59","messageId":"60","endLine":11,"endColumn":44},{"ruleId":"66","severity":1,"message":"67","line":26,"column":8,"nodeType":"68","endLine":26,"endColumn":10,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],["70"],["71"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","Expected '===' and instead saw '=='.",["70"],["71"],"'setCookie' is assigned a value but never used.","'removeCookie' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getList'. Either include it or remove the dependency array.","ArrayExpression",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [getList]",{"range":"75","text":"76"},[828,830],"[getList]"]